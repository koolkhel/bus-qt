// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: indigo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "indigo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_indigo_2eproto() {
  delete indigo_msg::default_instance_;
  delete indigo_geo::default_instance_;
  delete indigo_UUID::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_indigo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_indigo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  indigo_msg::default_instance_ = new indigo_msg();
  indigo_geo::default_instance_ = new indigo_geo();
  indigo_UUID::default_instance_ = new indigo_UUID();
  indigo_msg::default_instance_->InitAsDefaultInstance();
  indigo_geo::default_instance_->InitAsDefaultInstance();
  indigo_UUID::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_indigo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_indigo_2eproto_once_);
void protobuf_AddDesc_indigo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_indigo_2eproto_once_,
                 &protobuf_AddDesc_indigo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_indigo_2eproto {
  StaticDescriptorInitializer_indigo_2eproto() {
    protobuf_AddDesc_indigo_2eproto();
  }
} static_descriptor_initializer_indigo_2eproto_;
#endif
bool indigo_event_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int indigo_msg::kDeviceIdFieldNumber;
const int indigo_msg::kCoordinatesFieldNumber;
const int indigo_msg::kEventsFieldNumber;
#endif  // !_MSC_VER

indigo_msg::indigo_msg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:indigo_msg)
}

void indigo_msg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  device_id_ = const_cast< ::indigo_UUID*>(
      ::indigo_UUID::internal_default_instance());
#else
  device_id_ = const_cast< ::indigo_UUID*>(&::indigo_UUID::default_instance());
#endif
}

indigo_msg::indigo_msg(const indigo_msg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:indigo_msg)
}

void indigo_msg::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

indigo_msg::~indigo_msg() {
  // @@protoc_insertion_point(destructor:indigo_msg)
  SharedDtor();
}

void indigo_msg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete device_id_;
  }
}

void indigo_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const indigo_msg& indigo_msg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_indigo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_indigo_2eproto();
#endif
  return *default_instance_;
}

indigo_msg* indigo_msg::default_instance_ = NULL;

indigo_msg* indigo_msg::New() const {
  return new indigo_msg;
}

void indigo_msg::Clear() {
  if (has_device_id()) {
    if (device_id_ != NULL) device_id_->::indigo_UUID::Clear();
  }
  coordinates_.Clear();
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool indigo_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:indigo_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .indigo_UUID device_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_coordinates;
        break;
      }

      // repeated .indigo_geo coordinates = 3;
      case 3: {
        if (tag == 26) {
         parse_coordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coordinates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_coordinates;
        if (input->ExpectTag(32)) goto parse_events;
        break;
      }

      // repeated .indigo_event events = 4;
      case 4: {
        if (tag == 32) {
         parse_events:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::indigo_event_IsValid(value)) {
            add_events(static_cast< ::indigo_event >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::indigo_event_IsValid,
                 this->mutable_events())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_events;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:indigo_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:indigo_msg)
  return false;
#undef DO_
}

void indigo_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:indigo_msg)
  // optional .indigo_UUID device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->device_id(), output);
  }

  // repeated .indigo_geo coordinates = 3;
  for (int i = 0; i < this->coordinates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->coordinates(i), output);
  }

  // repeated .indigo_event events = 4;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->events(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:indigo_msg)
}

int indigo_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .indigo_UUID device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_id());
    }

  }
  // repeated .indigo_geo coordinates = 3;
  total_size += 1 * this->coordinates_size();
  for (int i = 0; i < this->coordinates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coordinates(i));
  }

  // repeated .indigo_event events = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->events_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->events(i));
    }
    total_size += 1 * this->events_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void indigo_msg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const indigo_msg*>(&from));
}

void indigo_msg::MergeFrom(const indigo_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  coordinates_.MergeFrom(from.coordinates_);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      mutable_device_id()->::indigo_UUID::MergeFrom(from.device_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void indigo_msg::CopyFrom(const indigo_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool indigo_msg::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->coordinates())) return false;
  return true;
}

void indigo_msg::Swap(indigo_msg* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    coordinates_.Swap(&other->coordinates_);
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string indigo_msg::GetTypeName() const {
  return "indigo_msg";
}


// ===================================================================

#ifndef _MSC_VER
const int indigo_geo::kLongitudeFieldNumber;
const int indigo_geo::kLatitudeFieldNumber;
const int indigo_geo::kUnixtimeFieldNumber;
const int indigo_geo::kSpeedKmhFieldNumber;
const int indigo_geo::kTrackFieldNumber;
const int indigo_geo::kSatellitesUsedFieldNumber;
#endif  // !_MSC_VER

indigo_geo::indigo_geo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:indigo_geo)
}

void indigo_geo::InitAsDefaultInstance() {
}

indigo_geo::indigo_geo(const indigo_geo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:indigo_geo)
}

void indigo_geo::SharedCtor() {
  _cached_size_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  unixtime_ = 0;
  speed_kmh_ = 0;
  track_ = 0;
  satellites_used_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

indigo_geo::~indigo_geo() {
  // @@protoc_insertion_point(destructor:indigo_geo)
  SharedDtor();
}

void indigo_geo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void indigo_geo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const indigo_geo& indigo_geo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_indigo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_indigo_2eproto();
#endif
  return *default_instance_;
}

indigo_geo* indigo_geo::default_instance_ = NULL;

indigo_geo* indigo_geo::New() const {
  return new indigo_geo;
}

void indigo_geo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<indigo_geo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(longitude_, satellites_used_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool indigo_geo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:indigo_geo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double longitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latitude;
        break;
      }

      // required double latitude = 2;
      case 2: {
        if (tag == 17) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unixtime;
        break;
      }

      // required int32 unixtime = 3;
      case 3: {
        if (tag == 24) {
         parse_unixtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_speed_kmh;
        break;
      }

      // optional int32 speed_kmh = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_speed_kmh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_kmh_)));
          set_has_speed_kmh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_track;
        break;
      }

      // optional int32 track = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_track:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_)));
          set_has_track();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_satellites_used;
        break;
      }

      // optional int32 satellites_used = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_satellites_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &satellites_used_)));
          set_has_satellites_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:indigo_geo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:indigo_geo)
  return false;
#undef DO_
}

void indigo_geo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:indigo_geo)
  // required double longitude = 1;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // required int32 unixtime = 3;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unixtime(), output);
  }

  // optional int32 speed_kmh = 4 [default = 0];
  if (has_speed_kmh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->speed_kmh(), output);
  }

  // optional int32 track = 5 [default = 0];
  if (has_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->track(), output);
  }

  // optional int32 satellites_used = 6 [default = 0];
  if (has_satellites_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->satellites_used(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:indigo_geo)
}

int indigo_geo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double longitude = 1;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required double latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required int32 unixtime = 3;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unixtime());
    }

    // optional int32 speed_kmh = 4 [default = 0];
    if (has_speed_kmh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed_kmh());
    }

    // optional int32 track = 5 [default = 0];
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track());
    }

    // optional int32 satellites_used = 6 [default = 0];
    if (has_satellites_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->satellites_used());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void indigo_geo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const indigo_geo*>(&from));
}

void indigo_geo::MergeFrom(const indigo_geo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_speed_kmh()) {
      set_speed_kmh(from.speed_kmh());
    }
    if (from.has_track()) {
      set_track(from.track());
    }
    if (from.has_satellites_used()) {
      set_satellites_used(from.satellites_used());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void indigo_geo::CopyFrom(const indigo_geo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool indigo_geo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void indigo_geo::Swap(indigo_geo* other) {
  if (other != this) {
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(unixtime_, other->unixtime_);
    std::swap(speed_kmh_, other->speed_kmh_);
    std::swap(track_, other->track_);
    std::swap(satellites_used_, other->satellites_used_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string indigo_geo::GetTypeName() const {
  return "indigo_geo";
}


// ===================================================================

#ifndef _MSC_VER
const int indigo_UUID::kLeastSignificantBitsFieldNumber;
const int indigo_UUID::kMostSignificantBitsFieldNumber;
#endif  // !_MSC_VER

indigo_UUID::indigo_UUID()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:indigo_UUID)
}

void indigo_UUID::InitAsDefaultInstance() {
}

indigo_UUID::indigo_UUID(const indigo_UUID& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:indigo_UUID)
}

void indigo_UUID::SharedCtor() {
  _cached_size_ = 0;
  least_significant_bits_ = GOOGLE_LONGLONG(0);
  most_significant_bits_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

indigo_UUID::~indigo_UUID() {
  // @@protoc_insertion_point(destructor:indigo_UUID)
  SharedDtor();
}

void indigo_UUID::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void indigo_UUID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const indigo_UUID& indigo_UUID::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_indigo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_indigo_2eproto();
#endif
  return *default_instance_;
}

indigo_UUID* indigo_UUID::default_instance_ = NULL;

indigo_UUID* indigo_UUID::New() const {
  return new indigo_UUID;
}

void indigo_UUID::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<indigo_UUID*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(least_significant_bits_, most_significant_bits_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool indigo_UUID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:indigo_UUID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 least_significant_bits = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &least_significant_bits_)));
          set_has_least_significant_bits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_most_significant_bits;
        break;
      }

      // optional sint64 most_significant_bits = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_most_significant_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &most_significant_bits_)));
          set_has_most_significant_bits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:indigo_UUID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:indigo_UUID)
  return false;
#undef DO_
}

void indigo_UUID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:indigo_UUID)
  // optional sint64 least_significant_bits = 1 [default = 0];
  if (has_least_significant_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->least_significant_bits(), output);
  }

  // optional sint64 most_significant_bits = 2 [default = 0];
  if (has_most_significant_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->most_significant_bits(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:indigo_UUID)
}

int indigo_UUID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 least_significant_bits = 1 [default = 0];
    if (has_least_significant_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->least_significant_bits());
    }

    // optional sint64 most_significant_bits = 2 [default = 0];
    if (has_most_significant_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->most_significant_bits());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void indigo_UUID::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const indigo_UUID*>(&from));
}

void indigo_UUID::MergeFrom(const indigo_UUID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_least_significant_bits()) {
      set_least_significant_bits(from.least_significant_bits());
    }
    if (from.has_most_significant_bits()) {
      set_most_significant_bits(from.most_significant_bits());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void indigo_UUID::CopyFrom(const indigo_UUID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool indigo_UUID::IsInitialized() const {

  return true;
}

void indigo_UUID::Swap(indigo_UUID* other) {
  if (other != this) {
    std::swap(least_significant_bits_, other->least_significant_bits_);
    std::swap(most_significant_bits_, other->most_significant_bits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string indigo_UUID::GetTypeName() const {
  return "indigo_UUID";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
