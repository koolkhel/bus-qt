// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geo_message.proto

#ifndef PROTOBUF_geo_5fmessage_2eproto__INCLUDED
#define PROTOBUF_geo_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "indigo_message.pb.h"
// @@protoc_insertion_point(includes)

namespace indigo {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_geo_5fmessage_2eproto();
void protobuf_AssignDesc_geo_5fmessage_2eproto();
void protobuf_ShutdownFile_geo_5fmessage_2eproto();

class indigo_geo;

// ===================================================================

class indigo_geo : public ::google::protobuf::MessageLite {
 public:
  indigo_geo();
  virtual ~indigo_geo();

  indigo_geo(const indigo_geo& from);

  inline indigo_geo& operator=(const indigo_geo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const indigo_geo& default_instance();

  void Swap(indigo_geo* other);

  // implements Message ----------------------------------------------

  inline indigo_geo* New() const { return New(NULL); }

  indigo_geo* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const indigo_geo& from);
  void MergeFrom(const indigo_geo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(indigo_geo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double longitude = 1;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 1;
  double longitude() const;
  void set_longitude(double value);

  // required double latitude = 2;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  double latitude() const;
  void set_latitude(double value);

  // required int32 unixtime = 3;
  bool has_unixtime() const;
  void clear_unixtime();
  static const int kUnixtimeFieldNumber = 3;
  ::google::protobuf::int32 unixtime() const;
  void set_unixtime(::google::protobuf::int32 value);

  // optional int32 speed_kmh = 4 [default = 0];
  bool has_speed_kmh() const;
  void clear_speed_kmh();
  static const int kSpeedKmhFieldNumber = 4;
  ::google::protobuf::int32 speed_kmh() const;
  void set_speed_kmh(::google::protobuf::int32 value);

  // optional int32 track = 5 [default = 0];
  bool has_track() const;
  void clear_track();
  static const int kTrackFieldNumber = 5;
  ::google::protobuf::int32 track() const;
  void set_track(::google::protobuf::int32 value);

  // optional int32 satellites_used = 6 [default = 0];
  bool has_satellites_used() const;
  void clear_satellites_used();
  static const int kSatellitesUsedFieldNumber = 6;
  ::google::protobuf::int32 satellites_used() const;
  void set_satellites_used(::google::protobuf::int32 value);

  static const int kGeoCoordsFieldNumber = 100;
  static ::google::protobuf::internal::ExtensionIdentifier< ::indigo::pb::indigo_msg,
      ::google::protobuf::internal::RepeatedMessageTypeTraits< ::indigo::pb::indigo_geo >, 11, false >
    geo_coords;
  static const int kGeoCoordsInFieldNumber = 100;
  static ::google::protobuf::internal::ExtensionIdentifier< ::indigo::pb::internal_msg,
      ::google::protobuf::internal::MessageTypeTraits< ::indigo::pb::indigo_geo >, 11, false >
    geo_coords_in;
  // @@protoc_insertion_point(class_scope:indigo.pb.indigo_geo)
 private:
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_speed_kmh();
  inline void clear_has_speed_kmh();
  inline void set_has_track();
  inline void clear_has_track();
  inline void set_has_satellites_used();
  inline void clear_has_satellites_used();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::std::string _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double longitude_;
  double latitude_;
  ::google::protobuf::int32 unixtime_;
  ::google::protobuf::int32 speed_kmh_;
  ::google::protobuf::int32 track_;
  ::google::protobuf::int32 satellites_used_;
  friend void  protobuf_AddDesc_geo_5fmessage_2eproto();
  friend void protobuf_AssignDesc_geo_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_geo_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static indigo_geo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// indigo_geo

// required double longitude = 1;
inline bool indigo_geo::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void indigo_geo::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void indigo_geo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void indigo_geo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double indigo_geo::longitude() const {
  // @@protoc_insertion_point(field_get:indigo.pb.indigo_geo.longitude)
  return longitude_;
}
inline void indigo_geo::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:indigo.pb.indigo_geo.longitude)
}

// required double latitude = 2;
inline bool indigo_geo::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void indigo_geo::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void indigo_geo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void indigo_geo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double indigo_geo::latitude() const {
  // @@protoc_insertion_point(field_get:indigo.pb.indigo_geo.latitude)
  return latitude_;
}
inline void indigo_geo::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:indigo.pb.indigo_geo.latitude)
}

// required int32 unixtime = 3;
inline bool indigo_geo::has_unixtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void indigo_geo::set_has_unixtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void indigo_geo::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void indigo_geo::clear_unixtime() {
  unixtime_ = 0;
  clear_has_unixtime();
}
inline ::google::protobuf::int32 indigo_geo::unixtime() const {
  // @@protoc_insertion_point(field_get:indigo.pb.indigo_geo.unixtime)
  return unixtime_;
}
inline void indigo_geo::set_unixtime(::google::protobuf::int32 value) {
  set_has_unixtime();
  unixtime_ = value;
  // @@protoc_insertion_point(field_set:indigo.pb.indigo_geo.unixtime)
}

// optional int32 speed_kmh = 4 [default = 0];
inline bool indigo_geo::has_speed_kmh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void indigo_geo::set_has_speed_kmh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void indigo_geo::clear_has_speed_kmh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void indigo_geo::clear_speed_kmh() {
  speed_kmh_ = 0;
  clear_has_speed_kmh();
}
inline ::google::protobuf::int32 indigo_geo::speed_kmh() const {
  // @@protoc_insertion_point(field_get:indigo.pb.indigo_geo.speed_kmh)
  return speed_kmh_;
}
inline void indigo_geo::set_speed_kmh(::google::protobuf::int32 value) {
  set_has_speed_kmh();
  speed_kmh_ = value;
  // @@protoc_insertion_point(field_set:indigo.pb.indigo_geo.speed_kmh)
}

// optional int32 track = 5 [default = 0];
inline bool indigo_geo::has_track() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void indigo_geo::set_has_track() {
  _has_bits_[0] |= 0x00000010u;
}
inline void indigo_geo::clear_has_track() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void indigo_geo::clear_track() {
  track_ = 0;
  clear_has_track();
}
inline ::google::protobuf::int32 indigo_geo::track() const {
  // @@protoc_insertion_point(field_get:indigo.pb.indigo_geo.track)
  return track_;
}
inline void indigo_geo::set_track(::google::protobuf::int32 value) {
  set_has_track();
  track_ = value;
  // @@protoc_insertion_point(field_set:indigo.pb.indigo_geo.track)
}

// optional int32 satellites_used = 6 [default = 0];
inline bool indigo_geo::has_satellites_used() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void indigo_geo::set_has_satellites_used() {
  _has_bits_[0] |= 0x00000020u;
}
inline void indigo_geo::clear_has_satellites_used() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void indigo_geo::clear_satellites_used() {
  satellites_used_ = 0;
  clear_has_satellites_used();
}
inline ::google::protobuf::int32 indigo_geo::satellites_used() const {
  // @@protoc_insertion_point(field_get:indigo.pb.indigo_geo.satellites_used)
  return satellites_used_;
}
inline void indigo_geo::set_satellites_used(::google::protobuf::int32 value) {
  set_has_satellites_used();
  satellites_used_ = value;
  // @@protoc_insertion_point(field_set:indigo.pb.indigo_geo.satellites_used)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace indigo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geo_5fmessage_2eproto__INCLUDED
